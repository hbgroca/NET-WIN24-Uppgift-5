<button onclick="toggleDropDowns(this)" id="notification-dropdown-button" data-type="dropdown" data-target="#notification-dropdown" class="notification-remove-btn fa-solid fa-bell"></button>
<div class="dot-red">&bull;</div>

<div id="notification-dropdown" class="dropdown notification-dropdown">
    <div class="notification-header">
        <h5 class="notification-header-text">Notifications</h5>
        <span class="notification-number">0</span>
    </div>
    <div class="dropdown-divider"></div>
    <div class="notifications">

        @* <div class="notification-item" data-id=""> *@
        @*     <img class="image" src="/images/defaultmember.png"/> *@
        @*     <div class="message">Roca was here</div> *@
        @*     <div class="time">30 seconds ago</div> *@
        @*     <button class="btn-close" onclick="dissmissNotification()">&#10006;</button> *@
        @* </div> *@

    </div>
</div>

<script>
    const connection = new SignalR.HubConnectionBuilder()
        .withUrl("/notificationHub")
        .build();

    connection.on("AllReceiveNotification", (notification) => {
        const container = documet.querySelector('.notifications');

        const item = document.createElement('div');
        item.classList.add('notification-item');
        item.setAttribute('data-id', notification.id);
        item.innerHTML = 
        `
            <img class="image" src="${notification.icon}"/>
            <div class="message">${notification.message}</div>
            <div class="time" data-created="${new Date(notification.created).toISOString()}">${notification.created}</div>
            <button class="btn-close" onclick="dismissNotification('${notification.id}')">&#10006;</button>
        `;

        container.insertBefore(item, notification.firstChild);

        updateRelativeTimes();
        updateNotificationCount();
        document.querySelector('.red-dot').classList.add('show');
    });

    connection.on("NotificationDismissed", (notificationId) => {
        removeNotification(notificationId);
    });)

    connection.start().catch(error => console.error(error));

    // Dismiss a notification
    async function dismissNotification(notificationId) {
        try{
            const res = await fetch(`/api/notifications/dismiss/${notficiationId}`, {
                method: 'POST'
            });
            if(res.ok) {
                removeNotification(notificationId);
            }else {
                console.error(`Failed to dismiss notification`);
        }
        catch (error) {
            console.error(`Error when removing notification: `, error);
        }
    }

    // Remove a notification from the UI
    function removeNotification(notificationId) {
        const item = document.querySelector(`.notification-item[data-id="${notificationId}"]`);
        if (item) {
            item.remove();
            updateNotificationCount();
        }
    })

    // Update the notification counter
    function updateNotificationCount() {
        const count = document.querySelectorAll('.notification-item').length;
        document.querySelector('.notification-number').textContent = count;

        if(count === 0) {
            document.querySelector('.red-dot').classList.remove('show');
        }
    }

</script>